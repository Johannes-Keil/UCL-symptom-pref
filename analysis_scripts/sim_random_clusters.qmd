---
title: "Simulating Clusters"
format: pdf
editor: visual
---

## Illustrate what happens in randomly clustered data

We want to better understand the output we obtained from our actual data. So, see what some 'idealised' scenarios for clustered data would look like.

```{r, include = FALSE}
library(tidyverse)
library(MASS)

printf <- function(msg = "%5.3f", ...) {
  cat(sprintf(msg, ...))
}
inv_logit <- function(x) {
  exp(x)/(1+exp(x))
}


# load data
dat <- readRDS(file = "dat_pairwise.rds")

set.seed(7119)
```

## Simulate our data

```{r, include = FALSE}
set.seed(7119)

n_participants <- 2
n_items = 36

dat_sim <- matrix(ncol = 3, nrow = 0) %>% as.data.frame()
colnames(dat_sim) <- c("participant", "item", "wins")

total_wins = 190

for (subj in 1:n_participants) {
  
  these_wins <- data.frame( # list storing wins by item index
    item = paste("i", 1:n_items, sep = ""),
    wins = rep(0, n_items)
  ) 
  
  for (i in 1:total_wins) {
    index <- runif(1, min = 0, max = n_items) %>% round()
    these_wins$wins[index] <- these_wins$wins[index] + 1
  }
  
  dat_sim <- rbind(dat_sim, data.frame(participant = rep(subj, n_items), item = paste("i", 1:n_items, sep = ""), wins = these_wins$wins))
}

# this contains our 'ground truth'
ground_truth <- dat_sim %>% 
  pivot_wider(names_from = "item", values_from = wins) %>% 
  dplyr::select(-participant)

# now experimentally generate our clusters

n_sim = 64

sim <- matrix(ncol = n_items, nrow = 0) %>% as.data.frame()
colnames(sim) <- paste("i", 1:n_items, sep = "")

# items in first cluster
for (i in 1:n_sim){
  noise = rnorm(n = n_items, mean = 0, sd = 3)
  sim <- sim %>% 
    add_row(ground_truth[1, ] + noise) %>% 
    round()
}

#items in second cluster
for (i in 1:n_sim){
  noise = rnorm(n = n_items, mean = 0, sd = 3)
  sim <- sim %>% 
    add_row(ground_truth[2, ] + noise) %>% 
    round()
}
```

## What if there are 2 clusters?

```{r, include = F}

##############################################
##### HOW SHOULD IT LOOK FOR REAL CLUSTERS?###
##############################################

var_ratio = c()
within = c()

for (i in 1:20){
  clust <- kmeans(sim, i)
  
  within <- c(within, clust$tot.withinss)  
  ss <- clust$betweenss / (clust$tot.withinss + clust$betweenss)
  var_ratio <- c(var_ratio, ss)
}

plot(1:20, within, main = "Elbow Plot Two Clusters", xlab = "n Clusters", ylab = "Total Within SS")
plot(1:20, var_ratio, main = "Between/Total SS", xlab = "n Clusters", ylab = "Ratio Total Between SS / Total SS")

# now also get ward's dendrogram
# at a first look, four or 5 clusters seem reasonable

ward_raw <- hclust(dist(sim), method="ward.D")
plot(ward_raw)

rect.hclust(ward_raw, 2)

# extract two clusters.from the raw data
clust <- sim %>% 
  dist() %>% 
  kmeans(2)

# illustrate our clustering graphically
iso <- sim %>% 
  dist() %>% 
  isoMDS(k = 2)

points <- iso$points %>% as.data.frame()

grouping <- as.factor(paste("c", clust$cluster, sep = "")) %>% as.data.frame()

dat_plot <- cbind(points, grouping)
colnames(dat_plot) <- c("dim1", "dim2", "cluster")

this_plot1 <- ggplot(dat_plot, aes(x = dim1, y = dim2, color = cluster)) + 
  geom_point() +
  ggtitle("Two True Clusters")


```

First, we get a noticeable elbow in the elbow plot:

```{r, echo = FALSE}
plot(1:20, within, main = "Elbow Plot Two Clusters", xlab = "n Clusters", ylab = "Total Within SS")
```

Our dendrogram clearly shows four clusters, too:

```{r, echo = FALSE}
plot(ward_raw)
```

Third, when applying MDS to visualise, we get a nicely separated plot:

```{r, echo = FALSE}
this_plot1
```

## What if there is no cluster structure?

```{r, include = FALSE}

################################################################
##### HOW DOES IT LOOK IF THERE AREN'T ACTUALLY ANY CLUSTERS?###
################################################################

# look at only first half of simulated data, so there is only one cluster
sim <- sim[1:n_sim,]

var_ratio = c()
within = c()

for (i in 1:20){
  clust <- kmeans(sim, i)
  
  within <- c(within, clust$tot.withinss)  
  ss <- clust$betweenss / (clust$tot.withinss + clust$betweenss)
  var_ratio <- c(var_ratio, ss)
}

plot(1:20, within, main = "Elbow Plot One Cluster", xlab = "n Clusters", ylab = "Total Within SS")
plot(1:20, var_ratio, main = "Between/Total SS One Cluster", xlab = "n Clusters", ylab = "Ratio Total Between SS / Total SS")

# now also get ward's dendrogram
# at a first look, four or 5 clusters seem reasonable

ward_raw <- hclust(dist(sim), method="ward.D")
plot(ward_raw)

rect.hclust(ward_raw, 2)

# extract two clusters.from the raw data
clust <- sim %>% 
  dist() %>% 
  kmeans(2)

# illustrate our clustering graphically
iso <- sim %>% 
  dist() %>% 
  isoMDS(k = 2)

points <- iso$points %>% as.data.frame()

grouping <- as.factor(paste("c", clust$cluster, sep = "")) %>% as.data.frame()

dat_plot <- cbind(points, grouping)
colnames(dat_plot) <- c("dim1", "dim2", "cluster")

this_plot2 <- ggplot(dat_plot, aes(x = dim1, y = dim2, color = cluster)) + 
  geom_point() +
  ggtitle("One True Cluster")
```

First, we don't get an elbow. Instead the within-SS decreases monotonically, showing slight slowing down the further we go - maybe exponential decay?

```{r}
plot(1:20, within, main = "Elbow Plot One Cluster", xlab = "n Clusters", ylab = "Total Within SS")
```

Ward's dendrogram shows a confused multi-layer structure with lots of 'clusters' within clusters with relatively low distance (height) between them:

```{r, echo = FALSE}
plot(ward_raw)
```

Similarly, when applying MDS our spatial structure is implausible:

```{r, echo = FALSE}
this_plot2
```

## How does our real data look?

```{r, include = FALSE}

# Storage hygiene
rm(list=setdiff(ls(), c("dat", "dat_filter", "dat_demo", "inv_logit", "core_items")))

# recompute wins & ranks within each participant, but separate by wave

  a <- dat %>% 
    group_by(participant, wave, item1) %>% 
    summarise(
      wins1 = sum(win1)
    ) %>% 
    ungroup() %>% 
    dplyr::rename(item = item1)
  
  # some entries are missing, because items only appear in one row
  # for our merge operation below to work, we need to fix this
  # manually add those entries
  
  for (w in 1:2) {
    for (subj in unique(dat$participant)){
      
      item1_list <- filter(dat, participant == subj, wave == w)$item1 %>% unique()
      item2_list <- filter(dat, participant == subj, wave == w)$item2 %>% unique()
      
      for (i in item2_list[!item2_list %in% item1_list]) {
        a <- a %>% add_row(
          participant = subj,
          wave = w,
          item = i,
          wins1 = 0
        )
      }
    }
  }

  b <- dat %>% 
    group_by(participant, wave, item2) %>% 
    summarise(
      wins2 = sum(win2)
    ) %>% 
    ungroup() %>% 
    dplyr::rename(item = item2)
  
  
  for (w in 1:2) {
    for (subj in unique(dat$participant)){
      
      item1_list <- filter(dat, participant == subj, wave == w)$item1 %>% unique()
      item2_list <- filter(dat, participant == subj, wave == w)$item2 %>% unique()
      
      for (i in item1_list[!item1_list %in% item2_list]) {
        b <- b %>% 
          add_row(
            participant = subj,
            wave = w,
            item = i,
            wins2 = 0
        )
      }
    }
  }

# compute ranks within each participant
  wins_participant_wave <- merge(a, b) %>% 
    mutate(wins = wins1 + wins2) %>% 
    arrange(participant) %>% 
    group_by(participant) %>%
    dplyr::select(participant, item, wave, wins)
  
# generate a participant-by-item table
  
dist_w1 <- wins_participant_wave %>% 
  filter(wave == 1) %>% 
  dplyr::select(-wave) %>% 
  pivot_wider(
    names_from = item,
    values_from = wins
  ) %>% 
  ungroup() %>% 
  dplyr::select(starts_with("i"))

# recode NAs as 0
# reasonable, since participants expressed no preference whatsoever for those symptoms

for (i in 1:nrow(dist_w1)){
  for (j in 1:ncol(dist_w1)){
    if (is.na(dist_w1[i, j])){
      dist_w1[i, j] <- 0
    }
  }
}

# generate a participant-by-item table
  
dist_w2 <- wins_participant_wave %>% 
  filter(wave == 2) %>% 
  dplyr::select(-wave) %>% 
  pivot_wider(
    names_from = item,
    values_from = wins
  ) %>% 
  ungroup() %>% 
  dplyr::select(starts_with("i"))

# recode NAs as 0
# reasonable, since participants expressed no preference whatsoever for those symptoms

for (i in 1:nrow(dist_w2)){
  for (j in 1:ncol(dist_w2)){
    if (is.na(dist_w2[i, j])){
      dist_w2[i, j] <- 0
    }
  }
}


# first, look at the change in between-cluster variance as we change the number of clusters

var_ratio = c()
within = c()

for (i in 1:20){
  clust <- kmeans(dist_w1, i)
  
  within <- c(within, clust$tot.withinss)  
  ss <- clust$betweenss / (clust$tot.withinss + clust$betweenss)
  var_ratio <- c(var_ratio, ss)
}

plot(1:20, within, main = "Elbow Plot", xlab = "n Clusters", ylab = "Total Within SS")
plot(1:20, var_ratio, main = "Between/Total SS", xlab = "n Clusters", ylab = "Ratio Total Between SS / Total SS")

# now also get ward's dendrogram
# at a first look, four or 5 clusters seem reasonable

ward_raw <- hclust(dist(dist_w1), method="ward.D")
plot(ward_raw)

rect.hclust(ward_raw, 4)


# extract four clusters.from the raw data
clust_w1 <- dist_w1 %>% 
  dist() %>% 
  kmeans(4)

# illustrate our clustering graphically
iso <- dist_w1 %>% 
  dist() %>% 
  isoMDS(k = 2)

points <- iso$points %>% as.data.frame()

grouping <- as.factor(paste("c", clust_w1$cluster, sep = "")) %>% as.data.frame()

dat_plot <- cbind(points, grouping)
colnames(dat_plot) <- c("dim1", "dim2", "cluster")

this_plot <- ggplot(dat_plot, aes(x = dim1, y = dim2, color = cluster)) + 
            geom_point()
```
